% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-url.R
\name{check_url}
\alias{check_url}
\title{Check if x is a valid URL}
\usage{
check_url(
  x,
  pattern = NULL,
  ...,
  allow_null = FALSE,
  message = NULL,
  arg = caller_arg(url),
  call = caller_env()
)
}
\arguments{
\item{...}{Passed to \code{\link[rlang:abort]{rlang::abort()}}, \code{\link[rlang:abort]{rlang::warn()}} or
\code{\link[rlang:abort]{rlang::inform()}}.}

\item{allow_null}{Default \code{FALSE}. If \code{FALSE}, error if input object is
\code{NULL}. If \code{TRUE} and input is \code{NULL}, invisibly return \code{NULL}.}

\item{message}{It is formatted via a call to \code{\link[cli:cli_bullets]{cli_bullets()}}.}

\item{arg}{An argument name as a string. This argument
will be mentioned in error messages as the input that is at the
origin of a problem.}

\item{call}{The execution environment of a currently running
function, e.g. \code{call = caller_env()}. The corresponding function
call is retrieved and mentioned in error messages as the source
of the error.

You only need to supply \code{call} when throwing a condition from a
helper function which wouldn't be relevant to mention in the
message.

Can also be \code{NULL} or a \link[rlang:topic-defuse]{defused function call} to
respectively not display any call or hard-code a code to display.

For more information about error calls, see \ifelse{html}{\link[rlang:topic-error-call]{Including function calls in error messages}}{\link[rlang:topic-error-call]{Including function calls in error messages}}.}
}
\description{
Check if x is a valid URL
}
\keyword{internal}
